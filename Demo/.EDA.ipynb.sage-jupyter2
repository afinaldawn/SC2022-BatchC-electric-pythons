{"backend_state":"running","connection_file":"/projects/0bcf82e6-7441-4432-a339-19b67c22cc5c/.local/share/jupyter/runtime/kernel-5f9bfed6-dd92-45f1-b1a1-ff7930bba24b.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1658868143292,"exec_count":57,"id":"603342","input":"import pandas as pd \nimport numpy as np","kernel":"ds_env","pos":0,"start":1658868143286,"state":"done","type":"cell"}
{"cell_type":"code","end":1658868144558,"exec_count":58,"id":"1a68e2","input":"df = pd.read_csv('Levels_Fyi_Salary_Data.csv') #reading in the data","kernel":"ds_env","pos":1,"start":1658868144093,"state":"done","type":"cell"}
{"cell_type":"code","end":1658868145216,"exec_count":59,"id":"c59768","input":"missing_cols = [] #checking what cols have nans\nfor col in df.columns:\n    if df[col].isnull().values.any():\n        num = df[col].isnull().sum()\n        missing_cols.append([col, num])","kernel":"ds_env","pos":2,"start":1658868145130,"state":"done","type":"cell"}
{"cell_type":"code","end":1658868146230,"exec_count":60,"id":"b4ca69","input":"missing_cols","kernel":"ds_env","output":{"0":{"data":{"text/plain":"[['company', 5],\n ['level', 119],\n ['tag', 854],\n ['gender', 19540],\n ['otherdetails', 22505],\n ['dmaid', 2],\n ['Race', 40215],\n ['Education', 32272]]"},"exec_count":60}},"pos":3,"scrolled":true,"start":1658868146224,"state":"done","type":"cell"}
{"cell_type":"code","end":1658868147514,"exec_count":61,"id":"eb8b2d","input":"df = df.drop(['Race', 'Education', 'otherdetails', 'level', 'tag', 'dmaid', 'cityid', 'rowNumber', 'timestamp'], axis = 1) #dropping useless cols","kernel":"ds_env","pos":4,"start":1658868147498,"state":"done","type":"cell"}
{"cell_type":"code","end":1658868148291,"exec_count":62,"id":"195bf8","input":"df.dropna(inplace = True) #dropping rows with nans\ndf.reset_index(drop=True, inplace=True) ","kernel":"ds_env","pos":5,"start":1658868148252,"state":"done","type":"cell"}
{"cell_type":"code","end":1658868154240,"exec_count":64,"id":"fe547c","input":"df['state'] = df['location'].apply(get_state) #new cols abt states\ndf.drop(['location'], axis = 1, inplace = True)","kernel":"ds_env","pos":8,"start":1658868154171,"state":"done","type":"cell"}
{"cell_type":"code","end":1658868160011,"exec_count":65,"id":"cfe0bb","input":"\ntop_15_popular = list(df['company'].value_counts().index)[:15]\ndef in_popular(x):\n    if x in top_15_popular:\n        return True\n    else:\n        return False\n    \ndf['in_top_15'] = df['company'].apply(in_popular) #new col abt top 15 companies","kernel":"ds_env","pos":9,"start":1658868159841,"state":"done","type":"cell"}
{"cell_type":"code","end":1658868163068,"exec_count":66,"id":"ded399","input":"def check_education(master, bach, doc, high, some):\n    if master == 1:\n        return \"Masters\"\n    elif bach == 1:\n        return \"Bachelors\"\n    elif doc == 1:\n        return \"PHD\"\n    elif high == 1:\n        return 'Highschool'\n    elif some == 1:\n        return \"Some\"\n    else:\n        return \"Missing\"","kernel":"ds_env","pos":10,"start":1658868163043,"state":"done","type":"cell"}
{"cell_type":"code","end":1658868168055,"exec_count":67,"id":"dc5b51","input":"df['education'] = df.apply(lambda x: check_education(x.Masters_Degree, x.Bachelors_Degree, x.Doctorate_Degree, x.Highschool, x.Some_College), axis=1) #new cols abt education","kernel":"ds_env","pos":11,"start":1658868166408,"state":"done","type":"cell"}
{"cell_type":"code","end":1658868168845,"exec_count":68,"id":"9b9bd4","input":"len(df[df['education'] == 'Missing'])","kernel":"ds_env","output":{"0":{"data":{"text/plain":"15334"},"exec_count":68}},"pos":12,"start":1658868168820,"state":"done","type":"cell"}
{"cell_type":"code","end":1658868171687,"exec_count":69,"id":"1bca34","input":"df = df[df['education'] != 'Missing']\ndf.reset_index(drop=True, inplace=True)\ndf.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>company</th>\n      <th>title</th>\n      <th>totalyearlycompensation</th>\n      <th>yearsofexperience</th>\n      <th>yearsatcompany</th>\n      <th>basesalary</th>\n      <th>stockgrantvalue</th>\n      <th>bonus</th>\n      <th>gender</th>\n      <th>Masters_Degree</th>\n      <th>...</th>\n      <th>Highschool</th>\n      <th>Some_College</th>\n      <th>Race_Asian</th>\n      <th>Race_White</th>\n      <th>Race_Two_Or_More</th>\n      <th>Race_Black</th>\n      <th>Race_Hispanic</th>\n      <th>state</th>\n      <th>in_top_15</th>\n      <th>education</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Capital One</td>\n      <td>Data Scientist</td>\n      <td>125000</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>121000.0</td>\n      <td>0.0</td>\n      <td>4000.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Other</td>\n      <td>True</td>\n      <td>PHD</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bloomberg</td>\n      <td>Software Engineer</td>\n      <td>170000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>142000.0</td>\n      <td>0.0</td>\n      <td>18000.0</td>\n      <td>Male</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NY</td>\n      <td>False</td>\n      <td>Masters</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Amazon</td>\n      <td>Data Scientist</td>\n      <td>332000</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>185000.0</td>\n      <td>17000.0</td>\n      <td>130000.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>CA</td>\n      <td>True</td>\n      <td>PHD</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Apple</td>\n      <td>Software Engineer</td>\n      <td>240000</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>150000.0</td>\n      <td>75000.0</td>\n      <td>15000.0</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>CA</td>\n      <td>True</td>\n      <td>PHD</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Synopsys</td>\n      <td>Software Engineer</td>\n      <td>310000</td>\n      <td>25.0</td>\n      <td>9.0</td>\n      <td>210000.0</td>\n      <td>40000.0</td>\n      <td>60000.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>CA</td>\n      <td>False</td>\n      <td>PHD</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 22 columns</p>\n</div>","text/plain":"       company              title  totalyearlycompensation  yearsofexperience  \\\n0  Capital One     Data Scientist                   125000                1.0   \n1    Bloomberg  Software Engineer                   170000                0.0   \n2       Amazon     Data Scientist                   332000                1.0   \n3        Apple  Software Engineer                   240000                3.0   \n4     Synopsys  Software Engineer                   310000               25.0   \n\n   yearsatcompany  basesalary  stockgrantvalue     bonus  gender  \\\n0             0.0    121000.0              0.0    4000.0    Male   \n1             0.0    142000.0              0.0   18000.0    Male   \n2             0.0    185000.0          17000.0  130000.0    Male   \n3             3.0    150000.0          75000.0   15000.0  Female   \n4             9.0    210000.0          40000.0   60000.0    Male   \n\n   Masters_Degree  ...  Highschool  Some_College  Race_Asian  Race_White  \\\n0               0  ...           0             0           0           0   \n1               1  ...           0             0           0           0   \n2               0  ...           0             0           0           0   \n3               0  ...           0             0           0           0   \n4               0  ...           0             0           0           0   \n\n   Race_Two_Or_More  Race_Black  Race_Hispanic  state  in_top_15 education  \n0                 0           0              0  Other       True       PHD  \n1                 0           0              0     NY      False   Masters  \n2                 0           0              0     CA       True       PHD  \n3                 0           0              0     CA       True       PHD  \n4                 0           0              0     CA      False       PHD  \n\n[5 rows x 22 columns]"},"exec_count":69}},"pos":13,"start":1658868171659,"state":"done","type":"cell"}
{"cell_type":"code","end":1658868176755,"exec_count":70,"id":"364d81","input":"def check_race(asian, white, two, black, hispanic):\n    if asian == 1:\n        return 'Asian'\n    elif white == 1:\n        return 'White'\n    elif two == 1:\n        return 'Two'\n    elif black == 1:\n        return \"Black\"\n    elif hispanic == 1:\n        return 'Hispanic'\n    else:\n        return 'Missing'\n    \ndf['race'] = df.apply(lambda x: check_race(x.Race_Asian, x.Race_White, x.Race_Two_Or_More, x.Race_Black, x.Race_Hispanic), axis=1)","kernel":"ds_env","pos":14,"start":1658868175773,"state":"done","type":"cell"}
{"cell_type":"code","end":1658868178223,"exec_count":71,"id":"3fd6a4","input":"len(df[df['race'] == 'Missing'])","kernel":"ds_env","output":{"0":{"data":{"text/plain":"6175"},"exec_count":71}},"pos":15,"start":1658868178212,"state":"done","type":"cell"}
{"cell_type":"code","end":1658868188396,"exec_count":72,"id":"7fedb7","input":"df = df[df['race'] != 'Missing']\ndf.reset_index(drop=True, inplace=True)\ndf.columns","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Index(['company', 'title', 'totalyearlycompensation', 'yearsofexperience',\n       'yearsatcompany', 'basesalary', 'stockgrantvalue', 'bonus', 'gender',\n       'Masters_Degree', 'Bachelors_Degree', 'Doctorate_Degree', 'Highschool',\n       'Some_College', 'Race_Asian', 'Race_White', 'Race_Two_Or_More',\n       'Race_Black', 'Race_Hispanic', 'state', 'in_top_15', 'education',\n       'race'],\n      dtype='object')"},"exec_count":72}},"pos":16,"start":1658868188384,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"030f8f","input":"#company, title, location, race, gender, education, experience so far","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1efb86","input":"","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":63,"id":"f8b460","input":"def get_state(x):\n    words = x.split(', ')\n    state = words[1]\n    if state == 'CA':\n        return 'CA'\n    elif state == 'WA':\n        return 'WA'\n    elif state == 'NY':\n        return 'NY'\n    else:\n        return 'Other'","kernel":"ds_env","pos":7,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":77,"id":"fd9853","input":"import plotly.express as px","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":78,"id":"bb1786","input":"fig = px.histogram(df, x=\"yearsofexperience\", title = 'Distribution of Years of Experience in STEM')\nfig.show()","output":{"0":{"data":{"iframe":"56ef1b257735c883bfe708106a8f1936121fa731"},"exec_count":78,"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":79,"id":"427f40","input":"fig = px.histogram(df, x=\"basesalary\", title = 'Distribution of Base Salaries in STEM')\nfig.show()","output":{"0":{"data":{"iframe":"6c23ad050344f056bd6630f967a9a6e4c8a36df7"},"exec_count":79,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":80,"id":"7d34df","input":"fig = px.histogram(df, x=\"totalyearlycompensation\", title = 'Distribution of Total Yearly Compensation in STEM', color = 'in_top_15')\nfig.show()","output":{"0":{"data":{"iframe":"b243b4985fee750f34462c9402407cf0d79c3e1b"},"exec_count":80,"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":82,"id":"1b6b5b","input":"fig = px.pie(companys, values='title', names='company', title='Top 10 Most Popular Tech Companies')\nfig.show()","output":{"0":{"data":{"iframe":"2060fa29d9edb36114b5f272887b65acfd8df399"},"exec_count":82,"output_type":"execute_result"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":83,"id":"165441","input":"gender_counts = df.groupby(by = 'gender')['company'].count().reset_index().head(3)\nfig = px.pie(gender_counts, values='company', names='gender', title='Gender Breakdown in STEM')\nfig.show()","output":{"0":{"data":{"iframe":"d43e84b9855bb582a41927f039e70a9c5c9c1564"},"exec_count":83,"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":84,"id":"c09b5e","input":"top_pay = df.groupby(by = 'company')['totalyearlycompensation'].mean().reset_index().sort_values(by = 'totalyearlycompensation', ascending = False).head(30)","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":85,"id":"962968","input":"fig = px.bar(top_pay, x='company', y='totalyearlycompensation', title = 'Top 30 STEM Companies with the Highest Average Yearly Pay')\nfig.show()","output":{"0":{"data":{"iframe":"cd98763506f152e581946878a7cd261ca72cc7ee"},"exec_count":85,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":86,"id":"de98fb","input":"sw = df[df['title'] == 'Software Engineer']\nfig = px.histogram(sw, x=\"totalyearlycompensation\", title = 'Distribution of Software Engineers Total Yearly Compensation in STEM', color = 'state')\nfig.show()","output":{"0":{"data":{"iframe":"cb88bbe19d373df7a4e8c3e140a018afe975f0be"},"exec_count":86,"output_type":"execute_result"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":87,"id":"3fd2f5","input":"ds = df[df['title'] == 'Data Scientist']\nfig = px.histogram(ds, x=\"totalyearlycompensation\", title = 'Distribution of Data Scientists Total Yearly Compensation in STEM', color = 'state')\nfig.show()","output":{"0":{"data":{"iframe":"76a4ae4c478b53b31376362a3b7e7a023f342e1f"},"exec_count":87,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":88,"id":"3fc7d6","input":"#bryce simon - gender vs totalyearconsumption - scatterplots\n#cassidy max - totalyearlycompensation - legend with in top15 - histogram\n#aadya anaya - job positions in stem - pie chart\n#bryce simon - job titles and their base salarys - barchart\n#four groups - swe basesalary - histogram - states as legend","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":89,"id":"c64098","input":"companys = df.groupby(by = 'company').count().reset_index().sort_values(by = 'title', ascending = False).head(10)","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"088d17","input":"## Machine Learning","pos":16.999755859375,"type":"cell"}
{"cell_type":"markdown","id":"0f5ec8","input":"#### KNN","pos":24.999633788887877,"type":"cell"}
{"cell_type":"markdown","id":"3b171d","input":"## Train Test Split","pos":16.99609375,"type":"cell"}
{"cell_type":"markdown","id":"53c44c","input":"## Advanced Features\n\n","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"5405cb","input":"#### Linear Regression","pos":16.99981689453125,"type":"cell"}
{"cell_type":"markdown","id":"720a0a","input":"#### Decision Tree ","pos":24.99998474120366,"type":"cell"}
{"cell_type":"markdown","id":"9663e4","input":"#### SVM Regression\n\n","pos":24.49999976158142,"type":"cell"}
{"cell_type":"markdown","id":"b4af23","input":"## Feature Engineering and more Cleaning\n\n","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"ca0879","input":"#### Ridge Regression\n\n","pos":16.99999237060547,"type":"cell"}
{"cell_type":"markdown","id":"cc49a9","input":"#### Stochastic Gradient Descent Regression\n\n","pos":24.99218749627471,"type":"cell"}
{"cell_type":"markdown","id":"e16295","input":"## One Hot Encoding\n\n","pos":16.5,"type":"cell"}
{"cell_type":"markdown","id":"eacb79","input":"## Graphs\n\n","pos":25,"type":"cell"}
{"end":1658868240419,"exec_count":74,"id":"bc6e42","input":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import make_column_transformer","kernel":"ds_env","pos":16.75,"start":1658868240416,"state":"done","type":"cell"}
{"end":1658868241908,"exec_count":75,"id":"e7de74","input":"transformer = make_column_transformer(\n    (OneHotEncoder(), ['title', 'gender', 'state']),\n    remainder='passthrough')","kernel":"ds_env","pos":16.875,"start":1658868241885,"state":"done","type":"cell"}
{"end":1658868243763,"exec_count":76,"id":"fed795","input":"transformed = transformer.fit_transform(df)\ntransformed_df = pd.DataFrame(transformed, columns=transformer.get_feature_names_out())","kernel":"ds_env","pos":16.9375,"start":1658868243701,"state":"done","type":"cell"}
{"end":1658868245486,"exec_count":77,"id":"cfe7cb","input":"transformed_df.columns","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Index(['onehotencoder__title_Business Analyst',\n       'onehotencoder__title_Data Scientist',\n       'onehotencoder__title_Hardware Engineer',\n       'onehotencoder__title_Human Resources',\n       'onehotencoder__title_Management Consultant',\n       'onehotencoder__title_Marketing',\n       'onehotencoder__title_Mechanical Engineer',\n       'onehotencoder__title_Product Designer',\n       'onehotencoder__title_Product Manager',\n       'onehotencoder__title_Recruiter', 'onehotencoder__title_Sales',\n       'onehotencoder__title_Software Engineer',\n       'onehotencoder__title_Software Engineering Manager',\n       'onehotencoder__title_Solution Architect',\n       'onehotencoder__title_Technical Program Manager',\n       'onehotencoder__gender_Female', 'onehotencoder__gender_Male',\n       'onehotencoder__gender_Other', 'onehotencoder__state_CA',\n       'onehotencoder__state_NY', 'onehotencoder__state_Other',\n       'onehotencoder__state_WA', 'remainder__company',\n       'remainder__totalyearlycompensation', 'remainder__yearsofexperience',\n       'remainder__yearsatcompany', 'remainder__basesalary',\n       'remainder__stockgrantvalue', 'remainder__bonus',\n       'remainder__Masters_Degree', 'remainder__Bachelors_Degree',\n       'remainder__Doctorate_Degree', 'remainder__Highschool',\n       'remainder__Some_College', 'remainder__Race_Asian',\n       'remainder__Race_White', 'remainder__Race_Two_Or_More',\n       'remainder__Race_Black', 'remainder__Race_Hispanic',\n       'remainder__in_top_15', 'remainder__education', 'remainder__race'],\n      dtype='object')"},"exec_count":77}},"pos":16.96875,"start":1658868245484,"state":"done","type":"cell"}
{"end":1658868738195,"exec_count":83,"id":"e5028c","input":"transformed_df['remainder__in_top_15'] = transformed_df['remainder__in_top_15'].astype(int)","kernel":"ds_env","pos":16.98828125,"start":1658868738193,"state":"done","type":"cell"}
{"end":1658868745770,"exec_count":84,"id":"4b1ded","input":"transformed_df.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>onehotencoder__title_Business Analyst</th>\n      <th>onehotencoder__title_Data Scientist</th>\n      <th>onehotencoder__title_Hardware Engineer</th>\n      <th>onehotencoder__title_Human Resources</th>\n      <th>onehotencoder__title_Management Consultant</th>\n      <th>onehotencoder__title_Marketing</th>\n      <th>onehotencoder__title_Mechanical Engineer</th>\n      <th>onehotencoder__title_Product Designer</th>\n      <th>onehotencoder__title_Product Manager</th>\n      <th>onehotencoder__title_Recruiter</th>\n      <th>...</th>\n      <th>remainder__Bachelors_Degree</th>\n      <th>remainder__Doctorate_Degree</th>\n      <th>remainder__Highschool</th>\n      <th>remainder__Some_College</th>\n      <th>remainder__Race_Asian</th>\n      <th>remainder__Race_White</th>\n      <th>remainder__Race_Two_Or_More</th>\n      <th>remainder__Race_Black</th>\n      <th>remainder__Race_Hispanic</th>\n      <th>remainder__in_top_15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 39 columns</p>\n</div>","text/plain":"  onehotencoder__title_Business Analyst onehotencoder__title_Data Scientist  \\\n0                                   0.0                                 0.0   \n1                                   0.0                                 0.0   \n2                                   0.0                                 0.0   \n3                                   0.0                                 0.0   \n4                                   0.0                                 0.0   \n\n  onehotencoder__title_Hardware Engineer onehotencoder__title_Human Resources  \\\n0                                    0.0                                  0.0   \n1                                    0.0                                  0.0   \n2                                    0.0                                  0.0   \n3                                    0.0                                  0.0   \n4                                    0.0                                  0.0   \n\n  onehotencoder__title_Management Consultant onehotencoder__title_Marketing  \\\n0                                        0.0                            0.0   \n1                                        0.0                            0.0   \n2                                        0.0                            0.0   \n3                                        0.0                            0.0   \n4                                        0.0                            0.0   \n\n  onehotencoder__title_Mechanical Engineer  \\\n0                                      0.0   \n1                                      0.0   \n2                                      0.0   \n3                                      0.0   \n4                                      0.0   \n\n  onehotencoder__title_Product Designer onehotencoder__title_Product Manager  \\\n0                                   0.0                                  0.0   \n1                                   0.0                                  0.0   \n2                                   0.0                                  0.0   \n3                                   0.0                                  0.0   \n4                                   0.0                                  0.0   \n\n  onehotencoder__title_Recruiter  ... remainder__Bachelors_Degree  \\\n0                            0.0  ...                           0   \n1                            0.0  ...                           1   \n2                            0.0  ...                           1   \n3                            0.0  ...                           0   \n4                            0.0  ...                           1   \n\n  remainder__Doctorate_Degree remainder__Highschool remainder__Some_College  \\\n0                           1                     0                       0   \n1                           0                     0                       0   \n2                           0                     0                       0   \n3                           0                     0                       0   \n4                           0                     0                       0   \n\n  remainder__Race_Asian remainder__Race_White remainder__Race_Two_Or_More  \\\n0                     1                     0                           0   \n1                     0                     0                           1   \n2                     1                     0                           0   \n3                     1                     0                           0   \n4                     0                     1                           0   \n\n  remainder__Race_Black remainder__Race_Hispanic remainder__in_top_15  \n0                     0                        0                    1  \n1                     0                        0                    1  \n2                     0                        0                    1  \n3                     0                        0                    1  \n4                     0                        0                    0  \n\n[5 rows x 39 columns]"},"exec_count":84}},"pos":16.9921875,"start":1658868745713,"state":"done","type":"cell"}
{"end":1658868800047,"exec_count":85,"id":"ed7061","input":"from sklearn.model_selection import train_test_split","kernel":"ds_env","pos":16.998046875,"start":1658868800021,"state":"done","type":"cell"}
{"end":1658868915948,"exec_count":86,"id":"aff6b0","input":"X = transformed_df.loc[:, transformed_df.columns != \"remainder__totalyearlycompensation\"]\ny = transformed_df.remainder__totalyearlycompensation","kernel":"ds_env","pos":16.9990234375,"start":1658868915911,"state":"done","type":"cell"}
{"end":1658868964452,"exec_count":88,"id":"0a7266","input":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)","kernel":"ds_env","pos":16.99951171875,"start":1658868964303,"state":"done","type":"cell"}
{"end":1658869064980,"exec_count":89,"id":"c5fd5d","input":"from sklearn.linear_model import LinearRegression\nlin = LinearRegression()\nlin.fit(X_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>","text/plain":"LinearRegression()"},"exec_count":89}},"pos":16.9998779296875,"start":1658869064622,"state":"done","type":"cell"}
{"end":1658869658083,"exec_count":94,"id":"674c9b","input":"from sklearn.linear_model import Ridge\nrid = Ridge()\nrid.fit(X_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Ridge()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge()</pre></div></div></div></div></div>","text/plain":"Ridge()"},"exec_count":94}},"pos":16.999996185302734,"start":1658869657906,"state":"done","type":"cell"}
{"end":1658869684092,"exec_count":95,"id":"2838fd","input":"lin_pred = lin.predict(X_test)","kernel":"ds_env","pos":16.99993896484375,"start":1658869684048,"state":"done","type":"cell"}
{"end":1658869685219,"exec_count":96,"id":"a2b331","input":"total_squared_error = (np.sum((y_test - lin_pred)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"1248612167.2077157\n"}},"pos":16.999969482421875,"start":1658869685203,"state":"done","type":"cell"}
{"end":1658869687660,"exec_count":97,"id":"ed2c42","input":"lin.score(X_test, y_test)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9257397925420172"},"exec_count":97}},"pos":16.999984741210938,"start":1658869687612,"state":"done","type":"cell"}
{"end":1658869703290,"exec_count":98,"id":"e8c417","input":"rid_pred = rid.predict(X_test)","kernel":"ds_env","pos":20.999998092651367,"start":1658869703271,"state":"done","type":"cell"}
{"end":1658869715117,"exec_count":99,"id":"d1ebeb","input":"total_squared_error = (np.sum((y_test - rid_pred)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"1248597912.7858734\n"}},"pos":22.999999046325684,"start":1658869715109,"state":"done","type":"cell"}
{"end":1658869732730,"exec_count":100,"id":"158129","input":"rid.score(X_test, y_test)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.925740640312327"},"exec_count":100}},"pos":23.999999523162842,"start":1658869732681,"state":"done","type":"cell"}
{"end":1658870690255,"exec_count":111,"id":"2440ae","input":"from sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler","kernel":"ds_env","pos":24.74999988079071,"start":1658870690241,"state":"done","type":"cell"}
{"end":1658870716695,"exec_count":112,"id":"b3378b","input":"svr = SVR()\nsvr.fit(X_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVR()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVR</label><div class=\"sk-toggleable__content\"><pre>SVR()</pre></div></div></div></div></div>","text/plain":"SVR()"},"exec_count":112}},"pos":24.874999940395355,"start":1658870692195,"state":"done","type":"cell"}
{"end":1658870724117,"exec_count":113,"id":"a01cc8","input":"svr_pred = svr.predict(X_test)","kernel":"ds_env","pos":24.937499970197678,"start":1658870716699,"state":"done","type":"cell"}
{"end":1658870724149,"exec_count":114,"id":"a305b2","input":"total_squared_error = (np.sum((y_test - svr_pred)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"17039159060.458633\n"}},"pos":24.96874998509884,"start":1658870724135,"state":"done","type":"cell"}
{"end":1658870732468,"exec_count":115,"id":"57f8c9","input":"svr.score(X_test, y_test)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"-0.013390322448081582"},"exec_count":115}},"pos":24.98437499254942,"start":1658870724162,"state":"done","type":"cell"}
{"end":1658870914023,"exec_count":118,"id":"8b71a6","input":"from sklearn.linear_model import SGDRegressor\nsgd = SGDRegressor()\nsgd.fit(X_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDRegressor</label><div class=\"sk-toggleable__content\"><pre>SGDRegressor()</pre></div></div></div></div></div>","text/plain":"SGDRegressor()"},"exec_count":118}},"pos":24.996093748137355,"start":1658870913445,"state":"done","type":"cell"}
{"end":1658870937156,"exec_count":119,"id":"ed631f","input":"sgd_pred = sgd.predict(X_test)","kernel":"ds_env","pos":24.998046874068677,"start":1658870937114,"state":"done","type":"cell"}
{"end":1658870956662,"exec_count":120,"id":"39eba4","input":"total_squared_error = (np.sum((y_test - sgd_pred)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"5.59088397331671e+37\n"}},"pos":24.99902343703434,"start":1658870956660,"state":"done","type":"cell"}
{"end":1658870973734,"exec_count":121,"id":"c58f0e","input":"sgd.score(X_test, y_test)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"-3.3251334132077373e+27"},"exec_count":121}},"pos":24.99951171851717,"start":1658870973693,"state":"done","type":"cell"}
{"end":1658871058318,"exec_count":122,"id":"7231b9","input":"from sklearn.neighbors import KNeighborsRegressor\nknn = KNeighborsRegressor()\nknn.fit(X_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor()</pre></div></div></div></div></div>","text/plain":"KNeighborsRegressor()"},"exec_count":122}},"pos":24.999755859258585,"start":1658871058111,"state":"done","type":"cell"}
{"end":1658871083756,"exec_count":123,"id":"96680e","input":"knn_pred = knn.predict(X_test)","kernel":"ds_env","pos":24.999877929629292,"start":1658871083164,"state":"done","type":"cell"}
{"end":1658871096035,"exec_count":124,"id":"c6f014","input":"total_squared_error = (np.sum((y_test - knn_pred)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"1458505490.922564\n"}},"pos":24.999938964814646,"start":1658871096021,"state":"done","type":"cell"}
{"end":1658871125389,"exec_count":125,"id":"a1740f","input":"knn.score(X_test, y_test)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9132565554148582"},"exec_count":125}},"pos":24.999969482407323,"start":1658871124600,"state":"done","type":"cell"}
{"end":1658871321348,"exec_count":130,"id":"1af465","input":"from sklearn.tree import DecisionTreeRegressor\ndt = DecisionTreeRegressor(max_depth = 2)\ndt.fit(X_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(max_depth=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" checked><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(max_depth=2)</pre></div></div></div></div></div>","text/plain":"DecisionTreeRegressor(max_depth=2)"},"exec_count":130}},"pos":24.99999237060183,"start":1658871321195,"state":"done","type":"cell"}
{"end":1658871323295,"exec_count":131,"id":"61f400","input":"dt_pred = dt.predict(X_test)","kernel":"ds_env","pos":24.999996185300915,"start":1658871323257,"state":"done","type":"cell"}
{"end":1658871324062,"exec_count":132,"id":"fb76ab","input":"total_squared_error = (np.sum((y_test - dt_pred)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"5415917096.987468\n"}},"pos":24.999998092650458,"start":1658871324058,"state":"done","type":"cell"}
{"end":1658871326821,"exec_count":133,"id":"c8f847","input":"dt.score(X_test, y_test)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.6778926733535366"},"exec_count":133}},"pos":24.99999904632523,"start":1658871326772,"state":"done","type":"cell"}
{"exec_count":78,"id":"dc5e90","input":"cols = ['remainder__company', 'remainder__education', 'remainder__race']\ntransformed_df.drop(cols, axis=1, inplace=True)","kernel":"ds_env","pos":16.984375,"state":"done","type":"cell"}
{"id":"3521b9","input":"#df.to_csv('cleaned_data')","pos":16.25,"type":"cell"}
{"id":0,"time":1658858146839,"type":"user"}
{"last_load":1658858146549,"type":"file"}