{"backend_state":"init","connection_file":"/projects/0bcf82e6-7441-4432-a339-19b67c22cc5c/.local/share/jupyter/runtime/kernel-66db3cd4-579b-4bbb-8f34-c30554a89a1d.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"cell_type":"markdown","id":"9c6884","input":"#### Working Function","pos":13.890625,"type":"cell"}
{"end":1659561988728,"exec_count":202,"id":"190071","input":"import pandas as pd\nimport numpy as np\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import FunctionTransformer","kernel":"ds_env","pos":0,"start":1659561988718,"state":"done","type":"cell"}
{"end":1659561989159,"exec_count":203,"id":"795733","input":"df = pd.read_csv('cleaned_data.csv')\ndf.drop(['Unnamed: 0', 'company', 'education', 'race'], axis = 1, inplace = True)","kernel":"ds_env","pos":1,"start":1659561989087,"state":"done","type":"cell"}
{"end":1659561989459,"exec_count":204,"id":"c5ad6f","input":"numeric_features = ['yearsofexperience',\n       'yearsatcompany', 'basesalary', 'stockgrantvalue', 'bonus',\n       'Masters_Degree', 'Bachelors_Degree', 'Doctorate_Degree', 'Highschool',\n       'Some_College', 'Race_Asian', 'Race_White', 'Race_Two_Or_More',\n       'Race_Black', 'Race_Hispanic', 'in_top_15']\nnumeric_transformer = FunctionTransformer(np.square)","kernel":"ds_env","pos":2.5,"start":1659561989452,"state":"done","type":"cell"}
{"end":1659561990267,"exec_count":205,"id":"26703b","input":"categorical_features = [\"title\", \"gender\", \"state\"]\ncategorical_transformer = OneHotEncoder(handle_unknown=\"ignore\")","kernel":"ds_env","pos":3,"start":1659561990259,"state":"done","type":"cell"}
{"end":1659561990813,"exec_count":206,"id":"792873","input":"preprocessor = ColumnTransformer(\n    transformers=[\n        (\"num\", numeric_transformer, numeric_features),\n        (\"cat\", categorical_transformer, categorical_features)\n    ]\n)","kernel":"ds_env","pos":3.5,"start":1659561990800,"state":"done","type":"cell"}
{"end":1659561991270,"exec_count":207,"id":"c88d7c","input":"clf = Pipeline(\n    steps=[(\"preprocessor\", preprocessor), (\"classifier\", KNeighborsRegressor())]\n)","kernel":"ds_env","pos":4,"start":1659561991266,"state":"done","type":"cell"}
{"end":1659561991772,"exec_count":208,"id":"c31b6f","input":"X = df.loc[:, (df.columns != \"totalyearlycompensation\")]\ny = df.totalyearlycompensation\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","kernel":"ds_env","pos":5,"start":1659561991745,"state":"done","type":"cell"}
{"end":1659561992422,"exec_count":209,"id":"745256","input":"clf.fit(X_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-13 {color: black;background-color: white;}#sk-container-id-13 pre{padding: 0;}#sk-container-id-13 div.sk-toggleable {background-color: white;}#sk-container-id-13 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-13 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-13 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-13 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-13 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-13 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-13 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-13 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-13 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-13 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-13 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-13 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-13 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-13 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-13 div.sk-item {position: relative;z-index: 1;}#sk-container-id-13 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-13 div.sk-item::before, #sk-container-id-13 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-13 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-13 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-13 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-13 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-13 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-13 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-13 div.sk-label-container {text-align: center;}#sk-container-id-13 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-13 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-13\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  FunctionTransformer(func=&lt;ufunc &#x27;square&#x27;&gt;),\n                                                  [&#x27;yearsofexperience&#x27;,\n                                                   &#x27;yearsatcompany&#x27;,\n                                                   &#x27;basesalary&#x27;,\n                                                   &#x27;stockgrantvalue&#x27;, &#x27;bonus&#x27;,\n                                                   &#x27;Masters_Degree&#x27;,\n                                                   &#x27;Bachelors_Degree&#x27;,\n                                                   &#x27;Doctorate_Degree&#x27;,\n                                                   &#x27;Highschool&#x27;, &#x27;Some_College&#x27;,\n                                                   &#x27;Race_Asian&#x27;, &#x27;Race_White&#x27;,\n                                                   &#x27;Race_Two_Or_More&#x27;,\n                                                   &#x27;Race_Black&#x27;,\n                                                   &#x27;Race_Hispanic&#x27;,\n                                                   &#x27;in_top_15&#x27;]),\n                                                 (&#x27;cat&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n                                                  [&#x27;title&#x27;, &#x27;gender&#x27;,\n                                                   &#x27;state&#x27;])])),\n                (&#x27;classifier&#x27;, KNeighborsRegressor())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-74\" type=\"checkbox\" ><label for=\"sk-estimator-id-74\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  FunctionTransformer(func=&lt;ufunc &#x27;square&#x27;&gt;),\n                                                  [&#x27;yearsofexperience&#x27;,\n                                                   &#x27;yearsatcompany&#x27;,\n                                                   &#x27;basesalary&#x27;,\n                                                   &#x27;stockgrantvalue&#x27;, &#x27;bonus&#x27;,\n                                                   &#x27;Masters_Degree&#x27;,\n                                                   &#x27;Bachelors_Degree&#x27;,\n                                                   &#x27;Doctorate_Degree&#x27;,\n                                                   &#x27;Highschool&#x27;, &#x27;Some_College&#x27;,\n                                                   &#x27;Race_Asian&#x27;, &#x27;Race_White&#x27;,\n                                                   &#x27;Race_Two_Or_More&#x27;,\n                                                   &#x27;Race_Black&#x27;,\n                                                   &#x27;Race_Hispanic&#x27;,\n                                                   &#x27;in_top_15&#x27;]),\n                                                 (&#x27;cat&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n                                                  [&#x27;title&#x27;, &#x27;gender&#x27;,\n                                                   &#x27;state&#x27;])])),\n                (&#x27;classifier&#x27;, KNeighborsRegressor())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-75\" type=\"checkbox\" ><label for=\"sk-estimator-id-75\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                 FunctionTransformer(func=&lt;ufunc &#x27;square&#x27;&gt;),\n                                 [&#x27;yearsofexperience&#x27;, &#x27;yearsatcompany&#x27;,\n                                  &#x27;basesalary&#x27;, &#x27;stockgrantvalue&#x27;, &#x27;bonus&#x27;,\n                                  &#x27;Masters_Degree&#x27;, &#x27;Bachelors_Degree&#x27;,\n                                  &#x27;Doctorate_Degree&#x27;, &#x27;Highschool&#x27;,\n                                  &#x27;Some_College&#x27;, &#x27;Race_Asian&#x27;, &#x27;Race_White&#x27;,\n                                  &#x27;Race_Two_Or_More&#x27;, &#x27;Race_Black&#x27;,\n                                  &#x27;Race_Hispanic&#x27;, &#x27;in_top_15&#x27;]),\n                                (&#x27;cat&#x27;, OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n                                 [&#x27;title&#x27;, &#x27;gender&#x27;, &#x27;state&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-76\" type=\"checkbox\" ><label for=\"sk-estimator-id-76\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;yearsofexperience&#x27;, &#x27;yearsatcompany&#x27;, &#x27;basesalary&#x27;, &#x27;stockgrantvalue&#x27;, &#x27;bonus&#x27;, &#x27;Masters_Degree&#x27;, &#x27;Bachelors_Degree&#x27;, &#x27;Doctorate_Degree&#x27;, &#x27;Highschool&#x27;, &#x27;Some_College&#x27;, &#x27;Race_Asian&#x27;, &#x27;Race_White&#x27;, &#x27;Race_Two_Or_More&#x27;, &#x27;Race_Black&#x27;, &#x27;Race_Hispanic&#x27;, &#x27;in_top_15&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-77\" type=\"checkbox\" ><label for=\"sk-estimator-id-77\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FunctionTransformer</label><div class=\"sk-toggleable__content\"><pre>FunctionTransformer(func=&lt;ufunc &#x27;square&#x27;&gt;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-78\" type=\"checkbox\" ><label for=\"sk-estimator-id-78\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;title&#x27;, &#x27;gender&#x27;, &#x27;state&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-79\" type=\"checkbox\" ><label for=\"sk-estimator-id-79\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-80\" type=\"checkbox\" ><label for=\"sk-estimator-id-80\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor()</pre></div></div></div></div></div></div></div>","text/plain":"Pipeline(steps=[('preprocessor',\n                 ColumnTransformer(transformers=[('num',\n                                                  FunctionTransformer(func=<ufunc 'square'>),\n                                                  ['yearsofexperience',\n                                                   'yearsatcompany',\n                                                   'basesalary',\n                                                   'stockgrantvalue', 'bonus',\n                                                   'Masters_Degree',\n                                                   'Bachelors_Degree',\n                                                   'Doctorate_Degree',\n                                                   'Highschool', 'Some_College',\n                                                   'Race_Asian', 'Race_White',\n                                                   'Race_Two_Or_More',\n                                                   'Race_Black',\n                                                   'Race_Hispanic',\n                                                   'in_top_15']),\n                                                 ('cat',\n                                                  OneHotEncoder(handle_unknown='ignore'),\n                                                  ['title', 'gender',\n                                                   'state'])])),\n                ('classifier', KNeighborsRegressor())])"},"exec_count":209}},"pos":6,"start":1659561992375,"state":"done","type":"cell"}
{"end":1659562000278,"exec_count":210,"id":"7e6be7","input":"clf.score(X_test, y_test)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9050458531996377"},"exec_count":210}},"pos":7,"start":1659561999834,"state":"done","type":"cell"}
{"end":1659562411223,"exec_count":216,"id":"fd9833","input":"test = X_train.head(1)\ntest","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>yearsofexperience</th>\n      <th>yearsatcompany</th>\n      <th>basesalary</th>\n      <th>stockgrantvalue</th>\n      <th>bonus</th>\n      <th>gender</th>\n      <th>Masters_Degree</th>\n      <th>Bachelors_Degree</th>\n      <th>Doctorate_Degree</th>\n      <th>Highschool</th>\n      <th>Some_College</th>\n      <th>Race_Asian</th>\n      <th>Race_White</th>\n      <th>Race_Two_Or_More</th>\n      <th>Race_Black</th>\n      <th>Race_Hispanic</th>\n      <th>state</th>\n      <th>in_top_15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8981</th>\n      <td>Solution Architect</td>\n      <td>14.0</td>\n      <td>8.0</td>\n      <td>155000.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>WA</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                   title  yearsofexperience  yearsatcompany  basesalary  \\\n8981  Solution Architect               14.0             8.0    155000.0   \n\n      stockgrantvalue  bonus  gender  Masters_Degree  Bachelors_Degree  \\\n8981              0.0    0.0  Female               0                 1   \n\n      Doctorate_Degree  Highschool  Some_College  Race_Asian  Race_White  \\\n8981                 0           0             0           0           1   \n\n      Race_Two_Or_More  Race_Black  Race_Hispanic state  in_top_15  \n8981                 0           0              0    WA       True  "},"exec_count":216}},"pos":10.5,"start":1659562411191,"state":"done","type":"cell"}
{"end":1659562421081,"exec_count":217,"id":"db50f1","input":"clf.predict(test)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([155200.])"},"exec_count":217}},"pos":12.25,"start":1659562421051,"state":"done","type":"cell"}
{"end":1659563526664,"exec_count":223,"id":"6f2ba8","input":"df = pd.read_csv('cleaned_data.csv')\ndf.drop(['Unnamed: 0'], axis = 1, inplace = True)\n\ndef convert(years):\n    if years == 0:\n        return 'No Experience'\n    elif 1 <= years <= 3:\n        return 'Little Experience'\n    elif 4 <= years <= 6:\n        return 'Medium Experienced'\n    else:\n        return 'Very Experienced'\n\ndf['experience'] = df['yearsofexperience'].apply(convert)\n\nuser_input = ['state', 'title', 'race', 'education', 'in_top_15', 'gender', 'experience']\nfill = df.groupby(by = user_input).mean()\nfill.reset_index(inplace = True)\n\ntop_15 = list(df['company'].value_counts().head(15).index)\n\ndef predict(data):\n    return clf.predict(data)[0]\n\ndef impute(state, title, race, education, company, gender, yearsofexperience):\n    top_15_data = None\n    if company in top_15:\n        top_15_data = True\n    else:\n        top_15_data = False\n\n    exp = convert(int(yearsofexperience))\n\n    new_data = fill[(fill['state'] == state) & \n         (fill['title'] == title) & \n         (fill['race'] == race) & \n         (fill['gender'] == gender) & \n         (fill['in_top_15'] == top_15_data) & \n         (fill['education'] == education) &\n         (fill['experience'] == exp)]\n\n    data = None\n    if len(new_data) == 0:\n        return \"Sorry, no matching data found. We are not able to make an accurate prediction.\"\n    else:\n        data = new_data.head(1)\n\n    return predict(data)","kernel":"ds_env","pos":14,"start":1659563526545,"state":"done","type":"cell"}
{"end":1659563924415,"exec_count":232,"id":"e45612","input":"row = impute('CA', 'Software Engineer', 'Asian', 'Masters', 'Other', 'Male', 0)\nrow","kernel":"ds_env","output":{"0":{"data":{"text/plain":"165000.0"},"exec_count":232}},"pos":15,"start":1659563924384,"state":"done","type":"cell"}
{"id":"03c14b","input":"","pos":17,"type":"cell"}
{"id":0,"time":1659634794492,"type":"user"}
{"last_load":1659551808334,"type":"file"}