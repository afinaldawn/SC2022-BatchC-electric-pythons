{"backend_state":"init","connection_file":"/projects/0bcf82e6-7441-4432-a339-19b67c22cc5c/.local/share/jupyter/runtime/kernel-db31042f-cfb7-4f5d-bae1-871379927632.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"490e72","input":"","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"2ce395","input":"import pandas as pd\nimport numpy as np","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"9706d5","input":"input = ['state', 'title', 'race', 'education', 'gender', 'experience', 'in_top_15']\nfiller = df.groupby(by = input)['yearsatcompany', 'basesalary', 'stockgrantvalue', 'bonus'].mean()\nfiller.reset_index(inplace=True)","output":{"0":{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_17828/2385807122.py:2: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n  filler = df.groupby(by = input)['yearsatcompany', 'basesalary', 'stockgrantvalue', 'bonus'].mean()\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"8ca665","input":"filler[(filler['state'] == 'CA') & (filler['title'] == 'Business Analyst') & (filler['race'] == 'Asian') & (filler['gender'] == 'Female') & (filler['in_top_15'] == True) & (filler['education'] == 'PHD')]","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state</th>\n      <th>title</th>\n      <th>race</th>\n      <th>education</th>\n      <th>gender</th>\n      <th>experience</th>\n      <th>in_top_15</th>\n      <th>yearsatcompany</th>\n      <th>basesalary</th>\n      <th>stockgrantvalue</th>\n      <th>bonus</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>","text/plain":"Empty DataFrame\nColumns: [state, title, race, education, gender, experience, in_top_15, yearsatcompany, basesalary, stockgrantvalue, bonus]\nIndex: []"},"exec_count":11,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"d7008b","input":"filler[(filler['state'] == 'WA') & (filler['title'] == 'Software Engineer') & (filler['race'] == 'Asian') & (filler['gender'] == 'Male') & (filler['in_top_15'] == True) & (filler['education'] == 'PHD')]","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state</th>\n      <th>title</th>\n      <th>race</th>\n      <th>education</th>\n      <th>gender</th>\n      <th>experience</th>\n      <th>in_top_15</th>\n      <th>yearsatcompany</th>\n      <th>basesalary</th>\n      <th>stockgrantvalue</th>\n      <th>bonus</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3137</th>\n      <td>WA</td>\n      <td>Software Engineer</td>\n      <td>Asian</td>\n      <td>PHD</td>\n      <td>Male</td>\n      <td>LITTLE EXPERIENCE</td>\n      <td>True</td>\n      <td>1.800000</td>\n      <td>165600.000000</td>\n      <td>87600.0</td>\n      <td>21200.000000</td>\n    </tr>\n    <tr>\n      <th>3139</th>\n      <td>WA</td>\n      <td>Software Engineer</td>\n      <td>Asian</td>\n      <td>PHD</td>\n      <td>Male</td>\n      <td>MEDIUM EXPERIENCE</td>\n      <td>True</td>\n      <td>2.714286</td>\n      <td>164857.142857</td>\n      <td>86000.0</td>\n      <td>24428.571429</td>\n    </tr>\n    <tr>\n      <th>3141</th>\n      <td>WA</td>\n      <td>Software Engineer</td>\n      <td>Asian</td>\n      <td>PHD</td>\n      <td>Male</td>\n      <td>NO EXPERIENCE</td>\n      <td>True</td>\n      <td>0.000000</td>\n      <td>157800.000000</td>\n      <td>70200.0</td>\n      <td>33000.000000</td>\n    </tr>\n    <tr>\n      <th>3143</th>\n      <td>WA</td>\n      <td>Software Engineer</td>\n      <td>Asian</td>\n      <td>PHD</td>\n      <td>Male</td>\n      <td>VERY EXPERIENCED</td>\n      <td>True</td>\n      <td>2.500000</td>\n      <td>187250.000000</td>\n      <td>200500.0</td>\n      <td>62375.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     state              title   race education gender         experience  \\\n3137    WA  Software Engineer  Asian       PHD   Male  LITTLE EXPERIENCE   \n3139    WA  Software Engineer  Asian       PHD   Male  MEDIUM EXPERIENCE   \n3141    WA  Software Engineer  Asian       PHD   Male      NO EXPERIENCE   \n3143    WA  Software Engineer  Asian       PHD   Male   VERY EXPERIENCED   \n\n      in_top_15  yearsatcompany     basesalary  stockgrantvalue         bonus  \n3137       True        1.800000  165600.000000          87600.0  21200.000000  \n3139       True        2.714286  164857.142857          86000.0  24428.571429  \n3141       True        0.000000  157800.000000          70200.0  33000.000000  \n3143       True        2.500000  187250.000000         200500.0  62375.000000  "},"exec_count":12,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"8dbd8d","input":"#change experience from numerical to categorical\n#no = 0 years\n#little = 1-3\n#medium = 4-6\n#a lot = 6+","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"a7c299","input":"#create groupby seven inputs & mean of outputs\ninput = ['state', 'title', 'race', 'gender', 'experience', 'education', 'in_top_15']\nfiller = df.groupby(by = input)['yearsatcompany', 'basesalary', 'stockgrantvalue', 'bonus'].mean()\nfiller.reset_index(inplace = True)","output":{"0":{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_17828/1973704127.py:3: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n  filler = df.groupby(by = input)['yearsatcompany', 'basesalary', 'stockgrantvalue', 'bonus'].mean()\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"8a03d2","input":"#when there is no filler data it returns an empty df\n#def find filler data ( user input) \n    #if df is empty\n        #return sorry no data found\n    #else\n        #return filler data","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"8a3787","input":"top_15 = list(df['company'].value_counts().head(15).index)\ntop_15","output":{"0":{"data":{"text/plain":"['Amazon',\n 'Microsoft',\n 'Google',\n 'Facebook',\n 'Apple',\n 'Oracle',\n 'IBM',\n 'Intel',\n 'Cisco',\n 'Salesforce',\n 'Capital One',\n 'VMware',\n 'JPMorgan Chase',\n 'Deloitte',\n 'Uber']"},"exec_count":16,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"de81ee","input":"userinput = ['state', 'title', 'race', 'gender', 'experience', 'education', 'in_top_15']\nfiller2 = df.groupby(by = userinput)['yearsatcompany', 'basesalary', 'stockgrantvalue', 'bonus'].mean()\nfiller2.reset_index(inplace = True)\nfiller2.head()","output":{"0":{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_17828/1658636948.py:2: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n  filler2 = df.groupby(by = userinput)['yearsatcompany', 'basesalary', 'stockgrantvalue', 'bonus'].mean()\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state</th>\n      <th>title</th>\n      <th>race</th>\n      <th>gender</th>\n      <th>experience</th>\n      <th>education</th>\n      <th>in_top_15</th>\n      <th>yearsatcompany</th>\n      <th>basesalary</th>\n      <th>stockgrantvalue</th>\n      <th>bonus</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CA</td>\n      <td>Business Analyst</td>\n      <td>Asian</td>\n      <td>Female</td>\n      <td>LITTLE EXPERIENCE</td>\n      <td>Bachelors</td>\n      <td>False</td>\n      <td>0.800000</td>\n      <td>98000.000000</td>\n      <td>10600.0</td>\n      <td>10600.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CA</td>\n      <td>Business Analyst</td>\n      <td>Asian</td>\n      <td>Female</td>\n      <td>LITTLE EXPERIENCE</td>\n      <td>Bachelors</td>\n      <td>True</td>\n      <td>1.666667</td>\n      <td>87333.333333</td>\n      <td>1000.0</td>\n      <td>8333.333333</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CA</td>\n      <td>Business Analyst</td>\n      <td>Asian</td>\n      <td>Female</td>\n      <td>LITTLE EXPERIENCE</td>\n      <td>Masters</td>\n      <td>False</td>\n      <td>1.200000</td>\n      <td>102000.000000</td>\n      <td>8400.0</td>\n      <td>19600.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CA</td>\n      <td>Business Analyst</td>\n      <td>Asian</td>\n      <td>Female</td>\n      <td>MEDIUM EXPERIENCE</td>\n      <td>Bachelors</td>\n      <td>False</td>\n      <td>0.500000</td>\n      <td>130000.000000</td>\n      <td>5000.0</td>\n      <td>5000.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CA</td>\n      <td>Business Analyst</td>\n      <td>Asian</td>\n      <td>Female</td>\n      <td>MEDIUM EXPERIENCE</td>\n      <td>Bachelors</td>\n      <td>True</td>\n      <td>1.000000</td>\n      <td>140000.000000</td>\n      <td>31000.0</td>\n      <td>21000.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"  state             title   race  gender         experience  education  \\\n0    CA  Business Analyst  Asian  Female  LITTLE EXPERIENCE  Bachelors   \n1    CA  Business Analyst  Asian  Female  LITTLE EXPERIENCE  Bachelors   \n2    CA  Business Analyst  Asian  Female  LITTLE EXPERIENCE    Masters   \n3    CA  Business Analyst  Asian  Female  MEDIUM EXPERIENCE  Bachelors   \n4    CA  Business Analyst  Asian  Female  MEDIUM EXPERIENCE  Bachelors   \n\n   in_top_15  yearsatcompany     basesalary  stockgrantvalue         bonus  \n0      False        0.800000   98000.000000          10600.0  10600.000000  \n1       True        1.666667   87333.333333           1000.0   8333.333333  \n2      False        1.200000  102000.000000           8400.0  19600.000000  \n3      False        0.500000  130000.000000           5000.0   5000.000000  \n4       True        1.000000  140000.000000          31000.0  21000.000000  "},"exec_count":17,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"6ca5f0","input":"def findfillerdata(state, title, race, gender, company, education, yearsofexperience):\n    top_15_data = None\n    if company in top_15:\n        top_15_data = True\n    else:\n        top_15_data = False\n    \n    experience = convert(yearsofexperience)\n    fillerdata = filler2[(filler2['state'] == state) & \n                     (filler2['title'] == title) & \n                     (filler2['race'] == race) & \n                     (filler2['gender'] == gender) & \n                     (filler2['in_top_15'] == top_15_data) & \n                     (filler2['education'] == education) & \n                     (filler2['experience'] == experience)]\n    if len(fillerdata) == 0:\n        return 'sorry no data found'\n    else:\n        return fillerdata","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"f0c7b1","input":"findfillerdata('WA', 'Software Engineer', 'Asian', 'Female', 'Google', 'Masters', 2)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state</th>\n      <th>title</th>\n      <th>race</th>\n      <th>gender</th>\n      <th>experience</th>\n      <th>education</th>\n      <th>in_top_15</th>\n      <th>yearsatcompany</th>\n      <th>basesalary</th>\n      <th>stockgrantvalue</th>\n      <th>bonus</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3105</th>\n      <td>WA</td>\n      <td>Software Engineer</td>\n      <td>Asian</td>\n      <td>Female</td>\n      <td>LITTLE EXPERIENCE</td>\n      <td>Masters</td>\n      <td>True</td>\n      <td>1.348837</td>\n      <td>131232.55814</td>\n      <td>33069.767442</td>\n      <td>15209.302326</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     state              title   race  gender         experience education  \\\n3105    WA  Software Engineer  Asian  Female  LITTLE EXPERIENCE   Masters   \n\n      in_top_15  yearsatcompany    basesalary  stockgrantvalue         bonus  \n3105       True        1.348837  131232.55814     33069.767442  15209.302326  "},"exec_count":19,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"b94f30","input":"df = pd.read_csv('cleaned_data')\ndf.drop(['Unnamed: 0'], axis = 1, inplace = True)","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"5f434e","input":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import FunctionTransformer","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"d1684d","input":"numeric_features = ['yearsofexperience', 'yearsatcompany', 'basesalary', 'stockgrantvalue', 'bonus', 'Masters_Degree', 'Bachelors_Degree', 'Doctorate_Degree', 'Highschool', 'Some_College', 'Race_Asian', 'Race_White', 'Race_White', 'Race_Two_Or_More', 'Race_Black', 'Race_Hispanic', 'in_top_15']\nnumeric_transformer = FunctionTransformer(np.square)","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"096051","input":"categorical_features = ['title', 'gender', 'state']\ncategorical_transformer = OneHotEncoder(handle_unknown='ignore')","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"0cb834","input":"preprocessor = ColumnTransformer(transformers = [('num', numeric_transformer, numeric_features), ('cat', categorical_transformer, categorical_features)])","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"b35931","input":"clf = Pipeline(steps=[('preprocessor', preprocessor),('classifier', KNeighborsRegressor())])","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"85a521","input":"x = df.loc[:, (df.columns !='totalyearlycompensation')]\ny = df.totalyearlycompensation\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"cbf84d","input":"clf.fit(x_train, y_train)","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  FunctionTransformer(func=&lt;ufunc &#x27;square&#x27;&gt;),\n                                                  [&#x27;yearsofexperience&#x27;,\n                                                   &#x27;yearsatcompany&#x27;,\n                                                   &#x27;basesalary&#x27;,\n                                                   &#x27;stockgrantvalue&#x27;, &#x27;bonus&#x27;,\n                                                   &#x27;Masters_Degree&#x27;,\n                                                   &#x27;Bachelors_Degree&#x27;,\n                                                   &#x27;Doctorate_Degree&#x27;,\n                                                   &#x27;Highschool&#x27;, &#x27;Some_College&#x27;,\n                                                   &#x27;Race_Asian&#x27;, &#x27;Race_White&#x27;,\n                                                   &#x27;Race_White&#x27;,\n                                                   &#x27;Race_Two_Or_More&#x27;,\n                                                   &#x27;Race_Black&#x27;,\n                                                   &#x27;Race_Hispanic&#x27;,\n                                                   &#x27;in_top_15&#x27;]),\n                                                 (&#x27;cat&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n                                                  [&#x27;title&#x27;, &#x27;gender&#x27;,\n                                                   &#x27;state&#x27;])])),\n                (&#x27;classifier&#x27;, KNeighborsRegressor())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  FunctionTransformer(func=&lt;ufunc &#x27;square&#x27;&gt;),\n                                                  [&#x27;yearsofexperience&#x27;,\n                                                   &#x27;yearsatcompany&#x27;,\n                                                   &#x27;basesalary&#x27;,\n                                                   &#x27;stockgrantvalue&#x27;, &#x27;bonus&#x27;,\n                                                   &#x27;Masters_Degree&#x27;,\n                                                   &#x27;Bachelors_Degree&#x27;,\n                                                   &#x27;Doctorate_Degree&#x27;,\n                                                   &#x27;Highschool&#x27;, &#x27;Some_College&#x27;,\n                                                   &#x27;Race_Asian&#x27;, &#x27;Race_White&#x27;,\n                                                   &#x27;Race_White&#x27;,\n                                                   &#x27;Race_Two_Or_More&#x27;,\n                                                   &#x27;Race_Black&#x27;,\n                                                   &#x27;Race_Hispanic&#x27;,\n                                                   &#x27;in_top_15&#x27;]),\n                                                 (&#x27;cat&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n                                                  [&#x27;title&#x27;, &#x27;gender&#x27;,\n                                                   &#x27;state&#x27;])])),\n                (&#x27;classifier&#x27;, KNeighborsRegressor())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                 FunctionTransformer(func=&lt;ufunc &#x27;square&#x27;&gt;),\n                                 [&#x27;yearsofexperience&#x27;, &#x27;yearsatcompany&#x27;,\n                                  &#x27;basesalary&#x27;, &#x27;stockgrantvalue&#x27;, &#x27;bonus&#x27;,\n                                  &#x27;Masters_Degree&#x27;, &#x27;Bachelors_Degree&#x27;,\n                                  &#x27;Doctorate_Degree&#x27;, &#x27;Highschool&#x27;,\n                                  &#x27;Some_College&#x27;, &#x27;Race_Asian&#x27;, &#x27;Race_White&#x27;,\n                                  &#x27;Race_White&#x27;, &#x27;Race_Two_Or_More&#x27;,\n                                  &#x27;Race_Black&#x27;, &#x27;Race_Hispanic&#x27;, &#x27;in_top_15&#x27;]),\n                                (&#x27;cat&#x27;, OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n                                 [&#x27;title&#x27;, &#x27;gender&#x27;, &#x27;state&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;yearsofexperience&#x27;, &#x27;yearsatcompany&#x27;, &#x27;basesalary&#x27;, &#x27;stockgrantvalue&#x27;, &#x27;bonus&#x27;, &#x27;Masters_Degree&#x27;, &#x27;Bachelors_Degree&#x27;, &#x27;Doctorate_Degree&#x27;, &#x27;Highschool&#x27;, &#x27;Some_College&#x27;, &#x27;Race_Asian&#x27;, &#x27;Race_White&#x27;, &#x27;Race_White&#x27;, &#x27;Race_Two_Or_More&#x27;, &#x27;Race_Black&#x27;, &#x27;Race_Hispanic&#x27;, &#x27;in_top_15&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FunctionTransformer</label><div class=\"sk-toggleable__content\"><pre>FunctionTransformer(func=&lt;ufunc &#x27;square&#x27;&gt;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;title&#x27;, &#x27;gender&#x27;, &#x27;state&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor()</pre></div></div></div></div></div></div></div>","text/plain":"Pipeline(steps=[('preprocessor',\n                 ColumnTransformer(transformers=[('num',\n                                                  FunctionTransformer(func=<ufunc 'square'>),\n                                                  ['yearsofexperience',\n                                                   'yearsatcompany',\n                                                   'basesalary',\n                                                   'stockgrantvalue', 'bonus',\n                                                   'Masters_Degree',\n                                                   'Bachelors_Degree',\n                                                   'Doctorate_Degree',\n                                                   'Highschool', 'Some_College',\n                                                   'Race_Asian', 'Race_White',\n                                                   'Race_White',\n                                                   'Race_Two_Or_More',\n                                                   'Race_Black',\n                                                   'Race_Hispanic',\n                                                   'in_top_15']),\n                                                 ('cat',\n                                                  OneHotEncoder(handle_unknown='ignore'),\n                                                  ['title', 'gender',\n                                                   'state'])])),\n                ('classifier', KNeighborsRegressor())])"},"exec_count":26,"output_type":"execute_result"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"2500de","input":"clf.score(x_test, y_test)","output":{"0":{"data":{"text/plain":"0.9050458531996377"},"exec_count":27,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"4cebd1","input":"test = x_train.head(1)\ntest","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>company</th>\n      <th>title</th>\n      <th>yearsofexperience</th>\n      <th>yearsatcompany</th>\n      <th>basesalary</th>\n      <th>stockgrantvalue</th>\n      <th>bonus</th>\n      <th>gender</th>\n      <th>Masters_Degree</th>\n      <th>Bachelors_Degree</th>\n      <th>...</th>\n      <th>Race_Asian</th>\n      <th>Race_White</th>\n      <th>Race_Two_Or_More</th>\n      <th>Race_Black</th>\n      <th>Race_Hispanic</th>\n      <th>state</th>\n      <th>in_top_15</th>\n      <th>education</th>\n      <th>race</th>\n      <th>experience</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8981</th>\n      <td>IBM</td>\n      <td>Solution Architect</td>\n      <td>14.0</td>\n      <td>8.0</td>\n      <td>155000.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>WA</td>\n      <td>True</td>\n      <td>Bachelors</td>\n      <td>White</td>\n      <td>VERY EXPERIENCED</td>\n    </tr>\n  </tbody>\n</table>\n<p>1 rows × 23 columns</p>\n</div>","text/plain":"     company               title  yearsofexperience  yearsatcompany  \\\n8981     IBM  Solution Architect               14.0             8.0   \n\n      basesalary  stockgrantvalue  bonus  gender  Masters_Degree  \\\n8981    155000.0              0.0    0.0  Female               0   \n\n      Bachelors_Degree  ...  Race_Asian  Race_White  Race_Two_Or_More  \\\n8981                 1  ...           0           1                 0   \n\n      Race_Black  Race_Hispanic  state  in_top_15  education   race  \\\n8981           0              0     WA       True  Bachelors  White   \n\n            experience  \n8981  VERY EXPERIENCED  \n\n[1 rows x 23 columns]"},"exec_count":28,"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"afe8e2","input":"clf.predict(test)","output":{"0":{"data":{"text/plain":"array([155200.])"},"exec_count":29,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"331bde","input":"df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>company</th>\n      <th>title</th>\n      <th>totalyearlycompensation</th>\n      <th>yearsofexperience</th>\n      <th>yearsatcompany</th>\n      <th>basesalary</th>\n      <th>stockgrantvalue</th>\n      <th>bonus</th>\n      <th>gender</th>\n      <th>Masters_Degree</th>\n      <th>...</th>\n      <th>Some_College</th>\n      <th>Race_Asian</th>\n      <th>Race_White</th>\n      <th>Race_Two_Or_More</th>\n      <th>Race_Black</th>\n      <th>Race_Hispanic</th>\n      <th>state</th>\n      <th>in_top_15</th>\n      <th>education</th>\n      <th>race</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Google</td>\n      <td>Software Engineer</td>\n      <td>400000</td>\n      <td>5.0</td>\n      <td>5.0</td>\n      <td>210000.0</td>\n      <td>145000.0</td>\n      <td>45000.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>CA</td>\n      <td>True</td>\n      <td>PHD</td>\n      <td>Asian</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Microsoft</td>\n      <td>Software Engineer</td>\n      <td>136000</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>124000.0</td>\n      <td>1000.0</td>\n      <td>11000.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>WA</td>\n      <td>True</td>\n      <td>Bachelors</td>\n      <td>Two</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Google</td>\n      <td>Software Engineer</td>\n      <td>337000</td>\n      <td>6.0</td>\n      <td>6.0</td>\n      <td>177000.0</td>\n      <td>125000.0</td>\n      <td>36000.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>CA</td>\n      <td>True</td>\n      <td>Bachelors</td>\n      <td>Asian</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Microsoft</td>\n      <td>Software Engineer</td>\n      <td>222000</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>164000.0</td>\n      <td>38000.0</td>\n      <td>20000.0</td>\n      <td>Male</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>WA</td>\n      <td>True</td>\n      <td>Masters</td>\n      <td>Asian</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Blend</td>\n      <td>Software Engineer</td>\n      <td>187000</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>165000.0</td>\n      <td>22000.0</td>\n      <td>0.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>CA</td>\n      <td>False</td>\n      <td>Bachelors</td>\n      <td>White</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 23 columns</p>\n</div>","text/plain":"     company              title  totalyearlycompensation  yearsofexperience  \\\n0     Google  Software Engineer                   400000                5.0   \n1  Microsoft  Software Engineer                   136000                3.0   \n2     Google  Software Engineer                   337000                6.0   \n3  Microsoft  Software Engineer                   222000                4.0   \n4      Blend  Software Engineer                   187000                5.0   \n\n   yearsatcompany  basesalary  stockgrantvalue    bonus gender  \\\n0             5.0    210000.0         145000.0  45000.0   Male   \n1             2.0    124000.0           1000.0  11000.0   Male   \n2             6.0    177000.0         125000.0  36000.0   Male   \n3             4.0    164000.0          38000.0  20000.0   Male   \n4             0.0    165000.0          22000.0      0.0   Male   \n\n   Masters_Degree  ...  Some_College  Race_Asian  Race_White  \\\n0               0  ...             0           1           0   \n1               0  ...             0           0           0   \n2               0  ...             0           1           0   \n3               1  ...             0           1           0   \n4               0  ...             0           0           1   \n\n   Race_Two_Or_More  Race_Black  Race_Hispanic  state  in_top_15  education  \\\n0                 0           0              0     CA       True        PHD   \n1                 1           0              0     WA       True  Bachelors   \n2                 0           0              0     CA       True  Bachelors   \n3                 0           0              0     WA       True    Masters   \n4                 0           0              0     CA      False  Bachelors   \n\n    race  \n0  Asian  \n1    Two  \n2  Asian  \n3  Asian  \n4  White  \n\n[5 rows x 23 columns]"},"exec_count":3,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"944bc0","input":"df.columns","output":{"0":{"data":{"text/plain":"Index(['company', 'title', 'totalyearlycompensation', 'yearsofexperience',\n       'yearsatcompany', 'basesalary', 'stockgrantvalue', 'bonus', 'gender',\n       'Masters_Degree', 'Bachelors_Degree', 'Doctorate_Degree', 'Highschool',\n       'Some_College', 'Race_Asian', 'Race_White', 'Race_Two_Or_More',\n       'Race_Black', 'Race_Hispanic', 'state', 'in_top_15', 'education',\n       'race'],\n      dtype='object')"},"exec_count":4,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"03a7bd","input":"#state, title, race, education, company, gender, experience","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"7fa4be","input":"def convert(years):\n    if years == 0:\n        return 'NO EXPERIENCE'\n    elif 1 <= years <= 3:\n        return 'LITTLE EXPERIENCE'\n    elif 4 <= years <= 6:\n        return 'MEDIUM EXPERIENCE'\n    else:\n        return 'VERY EXPERIENCED'","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"50c8ac","input":"df['experience'] = df.apply(lambda x: convert(x.yearsofexperience), axis=1)\ndf.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>company</th>\n      <th>title</th>\n      <th>totalyearlycompensation</th>\n      <th>yearsofexperience</th>\n      <th>yearsatcompany</th>\n      <th>basesalary</th>\n      <th>stockgrantvalue</th>\n      <th>bonus</th>\n      <th>gender</th>\n      <th>Masters_Degree</th>\n      <th>...</th>\n      <th>Race_Asian</th>\n      <th>Race_White</th>\n      <th>Race_Two_Or_More</th>\n      <th>Race_Black</th>\n      <th>Race_Hispanic</th>\n      <th>state</th>\n      <th>in_top_15</th>\n      <th>education</th>\n      <th>race</th>\n      <th>experience</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Google</td>\n      <td>Software Engineer</td>\n      <td>400000</td>\n      <td>5.0</td>\n      <td>5.0</td>\n      <td>210000.0</td>\n      <td>145000.0</td>\n      <td>45000.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>CA</td>\n      <td>True</td>\n      <td>PHD</td>\n      <td>Asian</td>\n      <td>MEDIUM EXPERIENCE</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Microsoft</td>\n      <td>Software Engineer</td>\n      <td>136000</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>124000.0</td>\n      <td>1000.0</td>\n      <td>11000.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>WA</td>\n      <td>True</td>\n      <td>Bachelors</td>\n      <td>Two</td>\n      <td>LITTLE EXPERIENCE</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Google</td>\n      <td>Software Engineer</td>\n      <td>337000</td>\n      <td>6.0</td>\n      <td>6.0</td>\n      <td>177000.0</td>\n      <td>125000.0</td>\n      <td>36000.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>CA</td>\n      <td>True</td>\n      <td>Bachelors</td>\n      <td>Asian</td>\n      <td>MEDIUM EXPERIENCE</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Microsoft</td>\n      <td>Software Engineer</td>\n      <td>222000</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>164000.0</td>\n      <td>38000.0</td>\n      <td>20000.0</td>\n      <td>Male</td>\n      <td>1</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>WA</td>\n      <td>True</td>\n      <td>Masters</td>\n      <td>Asian</td>\n      <td>MEDIUM EXPERIENCE</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Blend</td>\n      <td>Software Engineer</td>\n      <td>187000</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>165000.0</td>\n      <td>22000.0</td>\n      <td>0.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>CA</td>\n      <td>False</td>\n      <td>Bachelors</td>\n      <td>White</td>\n      <td>MEDIUM EXPERIENCE</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 24 columns</p>\n</div>","text/plain":"     company              title  totalyearlycompensation  yearsofexperience  \\\n0     Google  Software Engineer                   400000                5.0   \n1  Microsoft  Software Engineer                   136000                3.0   \n2     Google  Software Engineer                   337000                6.0   \n3  Microsoft  Software Engineer                   222000                4.0   \n4      Blend  Software Engineer                   187000                5.0   \n\n   yearsatcompany  basesalary  stockgrantvalue    bonus gender  \\\n0             5.0    210000.0         145000.0  45000.0   Male   \n1             2.0    124000.0           1000.0  11000.0   Male   \n2             6.0    177000.0         125000.0  36000.0   Male   \n3             4.0    164000.0          38000.0  20000.0   Male   \n4             0.0    165000.0          22000.0      0.0   Male   \n\n   Masters_Degree  ...  Race_Asian  Race_White  Race_Two_Or_More  Race_Black  \\\n0               0  ...           1           0                 0           0   \n1               0  ...           0           0                 1           0   \n2               0  ...           1           0                 0           0   \n3               1  ...           1           0                 0           0   \n4               0  ...           0           1                 0           0   \n\n   Race_Hispanic  state  in_top_15  education   race         experience  \n0              0     CA       True        PHD  Asian  MEDIUM EXPERIENCE  \n1              0     WA       True  Bachelors    Two  LITTLE EXPERIENCE  \n2              0     CA       True  Bachelors  Asian  MEDIUM EXPERIENCE  \n3              0     WA       True    Masters  Asian  MEDIUM EXPERIENCE  \n4              0     CA      False  Bachelors  White  MEDIUM EXPERIENCE  \n\n[5 rows x 24 columns]"},"exec_count":7,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"7238ac","input":"input = ['state', 'title', 'race', 'company', 'gender', 'yearsofexperience', 'education']\nfiller = df.groupby(by = input)['yearsatcompany', 'basesalary', 'stockgrantvalue', 'bonus'].mean()\nfiller.reset_index(inplace = True)\nfiller","output":{"0":{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_17828/3953414673.py:2: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n  filler = df.groupby(by = input)['yearsatcompany', 'basesalary', 'stockgrantvalue', 'bonus'].mean()\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state</th>\n      <th>title</th>\n      <th>race</th>\n      <th>company</th>\n      <th>gender</th>\n      <th>yearsofexperience</th>\n      <th>education</th>\n      <th>yearsatcompany</th>\n      <th>basesalary</th>\n      <th>stockgrantvalue</th>\n      <th>bonus</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CA</td>\n      <td>Business Analyst</td>\n      <td>Asian</td>\n      <td>8x8</td>\n      <td>Male</td>\n      <td>12.0</td>\n      <td>Bachelors</td>\n      <td>1.0</td>\n      <td>161000.0</td>\n      <td>54000.0</td>\n      <td>15000.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CA</td>\n      <td>Business Analyst</td>\n      <td>Asian</td>\n      <td>AIG</td>\n      <td>Male</td>\n      <td>11.0</td>\n      <td>Masters</td>\n      <td>2.0</td>\n      <td>94000.0</td>\n      <td>0.0</td>\n      <td>8000.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CA</td>\n      <td>Business Analyst</td>\n      <td>Asian</td>\n      <td>Adobe</td>\n      <td>Female</td>\n      <td>2.0</td>\n      <td>Bachelors</td>\n      <td>2.0</td>\n      <td>97000.0</td>\n      <td>18000.0</td>\n      <td>10000.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CA</td>\n      <td>Business Analyst</td>\n      <td>Asian</td>\n      <td>Affirm</td>\n      <td>Male</td>\n      <td>3.0</td>\n      <td>Masters</td>\n      <td>0.0</td>\n      <td>174000.0</td>\n      <td>30000.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CA</td>\n      <td>Business Analyst</td>\n      <td>Asian</td>\n      <td>Affirm</td>\n      <td>Male</td>\n      <td>4.0</td>\n      <td>Masters</td>\n      <td>0.0</td>\n      <td>174000.0</td>\n      <td>57000.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>16330</th>\n      <td>WA</td>\n      <td>Technical Program Manager</td>\n      <td>White</td>\n      <td>Salesforce</td>\n      <td>Male</td>\n      <td>20.0</td>\n      <td>Some</td>\n      <td>1.0</td>\n      <td>206000.0</td>\n      <td>18500.0</td>\n      <td>31000.0</td>\n    </tr>\n    <tr>\n      <th>16331</th>\n      <td>WA</td>\n      <td>Technical Program Manager</td>\n      <td>White</td>\n      <td>Sift</td>\n      <td>Male</td>\n      <td>20.0</td>\n      <td>Bachelors</td>\n      <td>2.0</td>\n      <td>205000.0</td>\n      <td>30000.0</td>\n      <td>20000.0</td>\n    </tr>\n    <tr>\n      <th>16332</th>\n      <td>WA</td>\n      <td>Technical Program Manager</td>\n      <td>White</td>\n      <td>T-mobile</td>\n      <td>Other</td>\n      <td>10.0</td>\n      <td>Bachelors</td>\n      <td>4.0</td>\n      <td>140000.0</td>\n      <td>15000.0</td>\n      <td>35000.0</td>\n    </tr>\n    <tr>\n      <th>16333</th>\n      <td>WA</td>\n      <td>Technical Program Manager</td>\n      <td>White</td>\n      <td>Twitter</td>\n      <td>Female</td>\n      <td>18.0</td>\n      <td>Bachelors</td>\n      <td>1.0</td>\n      <td>208000.0</td>\n      <td>90000.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>16334</th>\n      <td>WA</td>\n      <td>Technical Program Manager</td>\n      <td>White</td>\n      <td>Uber</td>\n      <td>Male</td>\n      <td>10.0</td>\n      <td>Masters</td>\n      <td>6.0</td>\n      <td>240000.0</td>\n      <td>250000.0</td>\n      <td>43000.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>16335 rows × 11 columns</p>\n</div>","text/plain":"      state                      title   race     company  gender  \\\n0        CA           Business Analyst  Asian         8x8    Male   \n1        CA           Business Analyst  Asian         AIG    Male   \n2        CA           Business Analyst  Asian       Adobe  Female   \n3        CA           Business Analyst  Asian      Affirm    Male   \n4        CA           Business Analyst  Asian      Affirm    Male   \n...     ...                        ...    ...         ...     ...   \n16330    WA  Technical Program Manager  White  Salesforce    Male   \n16331    WA  Technical Program Manager  White        Sift    Male   \n16332    WA  Technical Program Manager  White    T-mobile   Other   \n16333    WA  Technical Program Manager  White     Twitter  Female   \n16334    WA  Technical Program Manager  White        Uber    Male   \n\n       yearsofexperience  education  yearsatcompany  basesalary  \\\n0                   12.0  Bachelors             1.0    161000.0   \n1                   11.0    Masters             2.0     94000.0   \n2                    2.0  Bachelors             2.0     97000.0   \n3                    3.0    Masters             0.0    174000.0   \n4                    4.0    Masters             0.0    174000.0   \n...                  ...        ...             ...         ...   \n16330               20.0       Some             1.0    206000.0   \n16331               20.0  Bachelors             2.0    205000.0   \n16332               10.0  Bachelors             4.0    140000.0   \n16333               18.0  Bachelors             1.0    208000.0   \n16334               10.0    Masters             6.0    240000.0   \n\n       stockgrantvalue    bonus  \n0              54000.0  15000.0  \n1                  0.0   8000.0  \n2              18000.0  10000.0  \n3              30000.0      0.0  \n4              57000.0      0.0  \n...                ...      ...  \n16330          18500.0  31000.0  \n16331          30000.0  20000.0  \n16332          15000.0  35000.0  \n16333          90000.0      0.0  \n16334         250000.0  43000.0  \n\n[16335 rows x 11 columns]"},"exec_count":8,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"4b7804","input":"df['experience'] = df.apply(lambda x: convert(x.yearsofexperience), axis=1)\ndf.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>company</th>\n      <th>title</th>\n      <th>totalyearlycompensation</th>\n      <th>yearsofexperience</th>\n      <th>yearsatcompany</th>\n      <th>basesalary</th>\n      <th>stockgrantvalue</th>\n      <th>bonus</th>\n      <th>gender</th>\n      <th>Masters_Degree</th>\n      <th>...</th>\n      <th>Race_Asian</th>\n      <th>Race_White</th>\n      <th>Race_Two_Or_More</th>\n      <th>Race_Black</th>\n      <th>Race_Hispanic</th>\n      <th>state</th>\n      <th>in_top_15</th>\n      <th>education</th>\n      <th>race</th>\n      <th>experience</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Google</td>\n      <td>Software Engineer</td>\n      <td>400000</td>\n      <td>5.0</td>\n      <td>5.0</td>\n      <td>210000.0</td>\n      <td>145000.0</td>\n      <td>45000.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>CA</td>\n      <td>True</td>\n      <td>PHD</td>\n      <td>Asian</td>\n      <td>MEDIUM EXPERIENCE</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Microsoft</td>\n      <td>Software Engineer</td>\n      <td>136000</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>124000.0</td>\n      <td>1000.0</td>\n      <td>11000.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>WA</td>\n      <td>True</td>\n      <td>Bachelors</td>\n      <td>Two</td>\n      <td>LITTLE EXPERIENCE</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Google</td>\n      <td>Software Engineer</td>\n      <td>337000</td>\n      <td>6.0</td>\n      <td>6.0</td>\n      <td>177000.0</td>\n      <td>125000.0</td>\n      <td>36000.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>CA</td>\n      <td>True</td>\n      <td>Bachelors</td>\n      <td>Asian</td>\n      <td>MEDIUM EXPERIENCE</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Microsoft</td>\n      <td>Software Engineer</td>\n      <td>222000</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>164000.0</td>\n      <td>38000.0</td>\n      <td>20000.0</td>\n      <td>Male</td>\n      <td>1</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>WA</td>\n      <td>True</td>\n      <td>Masters</td>\n      <td>Asian</td>\n      <td>MEDIUM EXPERIENCE</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Blend</td>\n      <td>Software Engineer</td>\n      <td>187000</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>165000.0</td>\n      <td>22000.0</td>\n      <td>0.0</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>CA</td>\n      <td>False</td>\n      <td>Bachelors</td>\n      <td>White</td>\n      <td>MEDIUM EXPERIENCE</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 24 columns</p>\n</div>","text/plain":"     company              title  totalyearlycompensation  yearsofexperience  \\\n0     Google  Software Engineer                   400000                5.0   \n1  Microsoft  Software Engineer                   136000                3.0   \n2     Google  Software Engineer                   337000                6.0   \n3  Microsoft  Software Engineer                   222000                4.0   \n4      Blend  Software Engineer                   187000                5.0   \n\n   yearsatcompany  basesalary  stockgrantvalue    bonus gender  \\\n0             5.0    210000.0         145000.0  45000.0   Male   \n1             2.0    124000.0           1000.0  11000.0   Male   \n2             6.0    177000.0         125000.0  36000.0   Male   \n3             4.0    164000.0          38000.0  20000.0   Male   \n4             0.0    165000.0          22000.0      0.0   Male   \n\n   Masters_Degree  ...  Race_Asian  Race_White  Race_Two_Or_More  Race_Black  \\\n0               0  ...           1           0                 0           0   \n1               0  ...           0           0                 1           0   \n2               0  ...           1           0                 0           0   \n3               1  ...           1           0                 0           0   \n4               0  ...           0           1                 0           0   \n\n   Race_Hispanic  state  in_top_15  education   race         experience  \n0              0     CA       True        PHD  Asian  MEDIUM EXPERIENCE  \n1              0     WA       True  Bachelors    Two  LITTLE EXPERIENCE  \n2              0     CA       True  Bachelors  Asian  MEDIUM EXPERIENCE  \n3              0     WA       True    Masters  Asian  MEDIUM EXPERIENCE  \n4              0     CA      False  Bachelors  White  MEDIUM EXPERIENCE  \n\n[5 rows x 24 columns]"},"exec_count":9,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"id":0,"time":1659646234919,"type":"user"}
{"last_load":1659633242619,"type":"file"}